import groovy.xml.XmlSlurper

plugins {
    id 'ata-curriculum.snippets-conventions'
}

checkstyle {
    def suppressionFile = rootProject.file('Utilities/ATACheckstyle/configuration/checkstyle/unit1/suppressions.xml')
    configProperties.put('checkstyle.suppression.filter', suppressionFile)
}

dependencies {
    implementation 'javax.inject:javax.inject:1'
    implementation 'com.google.dagger:hilt-compiler:2.41'
    implementation 'com.google.dagger:dagger:2.30'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.30'
    testAnnotationProcessor 'com.google.dagger:hilt-compiler:2.41'
}

def wflowToTestsMap = [
        'dynamodbindexdesign-littleleague-dao-test': [
            'com.kenzie.dynamodbindexdesign.littleleague.dao.MatchDaoTest'
        ],
        'dynamodbindexdesign-littleleague-phase0-test': [
                'com.kenzie.dynamodbindexdesign.littleleague.integration.Phase0Test'
        ],
        'dynamodbindexdesign-littleleague-phase1-test': [
                'com.kenzie.dynamodbindexdesign.littleleague.integration.Phase1Test'
        ],
        'dynamodbindexdesign-littleleague-phase2-test': [
                'com.kenzie.dynamodbindexdesign.littleleague.integration.Phase2Test'
        ],
        'dynamodbindexdesign-littleleague-phase3-test': [
                'com.kenzie.dynamodbindexdesign.littleleague.integration.Phase3Test'
        ]
]

wflowToTestsMap.forEach { wflowName, testList ->
    tasks.register(wflowName) {
        dependsOn wflowtest
        test.doFirst {
            filter {
                testList.each { includeTestsMatching it }
            }
        }
        test.finalizedBy('copyTestResults')
    }
}

test.finalizedBy('copyTestResults')

tasks.register('copyTestResults', Copy) {
    from(layout.buildDirectory.dir("test-results")) {
        include "test/TEST-com.kenzie.dynamodbindexdesign.littleleague.integration.Phase0Test.xml"
        include "test/TEST-com.kenzie.dynamodbindexdesign.littleleague.integration.Phase1Test.xml"
        include "test/TEST-com.kenzie.dynamodbindexdesign.littleleague.integration.Phase2Test.xml"
        include "test/TEST-com.kenzie.dynamodbindexdesign.littleleague.integration.Phase3Test.xml"
    }
    into layout.projectDirectory.dir("test-results")
}

def integrationResults = ["test/TEST-com.kenzie.dynamodbindexdesign.littleleague.integration.Phase0Test.xml",
                          "test/TEST-com.kenzie.dynamodbindexdesign.littleleague.integration.Phase1Test.xml",
                          "test/TEST-com.kenzie.dynamodbindexdesign.littleleague.integration.Phase2Test.xml",
                          "test/TEST-com.kenzie.dynamodbindexdesign.littleleague.integration.Phase3Test.xml"]

tasks.register('verifytests-littleleague') {
    dependsOn tasks.copyTestResults
    doLast {
        integrationResults.forEach {
            def testResult = layout.projectDirectory.dir("test-results").file(it).asFile
            def attributesMap = new XmlSlurper().parse(testResult).attributes()
            assert attributesMap.get("skipped") == "0"
            assert attributesMap.get("failures") == "0"
            assert attributesMap.get("errors") == "0"
        }
    }
}
