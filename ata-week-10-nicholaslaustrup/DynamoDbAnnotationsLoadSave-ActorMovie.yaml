Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:*
              Resource: !GetAtt DDBAnnotationsLoadSaveActorMovies.Arn
  InitFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const AWS = require("aws-sdk");
          const response = require('./cfn-response');
          const docClient = new AWS.DynamoDB.DocumentClient();
          exports.handler = function(event, context) {
              console.log(JSON.stringify(event,null,2));
               var params = {
                  RequestItems: {
                   "DynamoDbAnnotationsLoadSave-ActorMovies": [
                     {
                      PutRequest: {
                       Item: {
                        actor: "Chadwick Boseman",
                        movie_title: "42",
                        director: "Brian Helgeland",
                        year_released: 2013,
                        have_watched: false
                       }
                      }
                     },
                     {
                      PutRequest: {
                       Item: {
                        actor: "Kristen Bell",
                        movie_title: "Forgetting Sarah Marshall",
                        director: "Nicholas Stoller",
                        year_released: 2008,
                        have_watched: true
                       }
                      }
                     },
                     {
                      PutRequest: {
                       Item: {
                        actor: "Kristen Bell",
                        movie_title: "Frozen",
                        director: "Chris Buck and Jennifer Lee",
                        year_released: 2013,
                        have_watched: false
                       }
                      }
                     },
                     {
                      PutRequest: {
                       Item: {
                        actor: "Michael Pena",
                        movie_title: "Ant Man",
                        director: "Peyton Reed",
                        year_released: 2015,
                        have_watched: true
                       }
                      }
                     }
                    ]
                  }
                 };
                 docClient.batchWrite(params, function(err, data) { if (err) {
                    response.send(event, context, "FAILED", {});
                  } else {
                    response.send(event, context, "SUCCESS", {});
                  }
                });
              };
      Handler: index.handler
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: nodejs14.x
      Timeout: 60
  DDBAnnotationsLoadSaveActorMovies:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "actor"
          AttributeType: "S"
        - AttributeName: "movie_title"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "actor"
          KeyType: "HASH"
        - AttributeName: "movie_title"
          KeyType: "RANGE"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      TableName: "DynamoDbAnnotationsLoadSave-ActorMovies"
      BillingMode: PAY_PER_REQUEST
  InitializeDynamoDB:
    Type: Custom::InitFunction
    Properties:
      ServiceToken:
         Fn::GetAtt: [ InitFunction , "Arn" ]
      DynamoTableName:
        Ref: DDBAnnotationsLoadSaveActorMovies
